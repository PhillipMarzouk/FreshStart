from django.db import connection
print(connection.settings_dict)
exit()
from django.core.wsgi import get_wsgi_application
get_wsgi_application()
print("✅ WSGI is running!")
python manage.py collectstatic --noinput
exit()
from food_order_api.models import DeliverySchedule
days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]
for day in days:
    DeliverySchedule.objects.get_or_create(name=day)
print("✅ Delivery Schedule options created!")
python manage.py makemigrations
exit
exit()
from food_order_api.models import DeliverySchedule
days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]
for day in days:
    DeliverySchedule.objects.get_or_create(name=day)
print("Delivery Schedule options added successfully!")
exit()
python manage.py show_urls | grep menu_item_clone
exit()
from django.urls import reverse
reverse("menu_item_clone", args=[1])  # Replace 1 with any valid menu item ID
reverse("menu_item_clone", args=[15])
exit()
from django.contrib.auth.models import User
from food_order_api.models import UserProfile
for user in User.objects.all():
    UserProfile.objects.get_or_create(user=user)
print("✅ UserProfiles created for all users!")
from food_order_api.models import MenuItem
print(MenuItem.objects.all())  # ✅ Check if menu items exist
exit
exit()
from food_order_api.models import MenuItem
print(MenuItem.objects.all())  # ✅ Check if menu items exist
from food_order_api.models import MenuItem
# Check if items exist
print(MenuItem.objects.all())  # ✅ Should return menu items
from django.utils.timezone import now
# Check for items available today
print(MenuItem.objects.filter(available_date=now().date()))
exit()
from meals.models import MenuItem
missing_school = MenuItem.objects.filter(school__isnull=True)
print(f"Missing school on {missing_school.count()} menu items.")
for item in missing_school[:10]:
    print(f"{item.id} - {item.plate_name}")
from menu.models import MenuItem
missing_school = MenuItem.objects.filter(school__isnull=True)
print(f"Missing school on {missing_school.count()} menu items.")
for item in missing_school[:10]:
    print(f"{item.id} - {item.plate_name}")
from menu.models import MenuItem
missing_school = MenuItem.objects.filter(school__isnull=True)
print(f"Missing school on {missing_school.count()} menu items.")
for item in missing_school[:10]:
    print(f"{item.id} - {item.plate_name}")
from menu.models.menu_item import MenuItem
missing_school = MenuItem.objects.filter(school__isnull=True)
from django.apps import apps
MenuItem = apps.get_model("menu", "MenuItem")
exit
exit()
from django.apps import apps
MenuItem = apps.get_model("menu", "MenuItem")
exit()
from food_order_api.models import MenuItem
# Update all incorrectly spelled meal types
MenuItem.objects.filter(meal_type="Breakfast Ceral").update(meal_type="Breakfast Cereal")
exit()
from food_order_api.models import CustomUser, UserProfile
admin_user = CustomUser.objects.get(username='admin')  # Or whichever is failing
UserProfile.objects.create(user=admin_user)
from food_order_api.models import CustomUser, UserProfile
# Replace 'admin' if your login user is different
user = CustomUser.objects.get(username='admin')
# Check if one already exists (avoid duplicate error)
UserProfile.objects.get_or_create(user=user)
exit()
from food_order_api.models import CustomUser, UserProfile
user = CustomUser.objects.get(username='admin')  # or another username you want to fix
UserProfile.objects.get_or_create(user=user)
from django.contrib.auth.models import User
from food_order_api.models import CustomUser
for old_user in User.objects.all():
    CustomUser.objects.get_or_create(
        id=old_user.id,  # preserve ID
        defaults={
            "username": old_user.username,
            "password": old_user.password,
            "is_superuser": old_user.is_superuser,
            "is_staff": old_user.is_staff,
            "is_active": old_user.is_active,
            "email": old_user.email,
            "first_name": old_user.first_name,
            "last_name": old_user.last_name,
            "date_joined": old_user.date_joined,
            "last_login": old_user.last_login,
        }
    )
from django.db import connection
from food_order_api.models import CustomUser
with connection.cursor() as cursor:
    cursor.execute("""
        SELECT id, username, password, is_superuser, is_staff, is_active,
               email, first_name, last_name, date_joined, last_login
        FROM auth_user
    """)
    rows = cursor.fetchall()
for row in rows:
    (
        id, username, password, is_superuser, is_staff, is_active,
        email, first_name, last_name, date_joined, last_login
    ) = row
    CustomUser.objects.get_or_create(
        id=id,
        defaults={
            "username": username,
            "password": password,
            "is_superuser": is_superuser,
            "is_staff": is_staff,
            "is_active": is_active,
            "email": email,
            "first_name": first_name,
            "last_name": last_name,
            "date_joined": date_joined,
            "last_login": last_login,
        }
    )
from django.db import connection
from food_order_api.models import CustomUser
with connection.cursor() as cursor:
    cursor.execute("""
        SELECT id, username, password, is_superuser, is_staff, is_active,
               email, first_name, last_name, date_joined, last_login
        FROM auth_user
    """)
    rows = cursor.fetchall()
for row in rows:
    (
        id, username, password, is_superuser, is_staff, is_active,
        email, first_name, last_name, date_joined, last_login
    ) = row
    CustomUser.objects.get_or_create(
        id=id,
        defaults={
            "username": username,
            "password": password,
            "is_superuser": is_superuser,
            "is_staff": is_staff,
            "is_active": is_active,
            "email": email,
            "first_name": first_name,
            "last_name": last_name,
            "date_joined": date_joined,
            "last_login": last_login,
        }
    )exit()
exit()
from django.db import connection
from food_order_api.models import CustomUser
with connection.cursor() as cursor:
    cursor.execute("""
        SELECT id, username, password, is_superuser, is_staff, is_active,
               email, first_name, last_name, date_joined, last_login
        FROM auth_user
    """)
    rows = cursor.fetchall()
for row in rows:
    (
        id, username, password, is_superuser, is_staff, is_active,
        email, first_name, last_name, date_joined, last_login
    ) = row
    CustomUser.objects.get_or_create(
        id=id,
        defaults={
            "username": username,
            "password": password,
            "is_superuser": is_superuser,
            "is_staff": is_staff,
            "is_active": is_active,
            "email": email,
            "first_name": first_name,
            "last_name": last_name,
            "date_joined": date_joined,
            "last_login": last_login,
        }
    )
for row in rows:
    (
        id, username, password, is_superuser, is_staff, is_active,
        email, first_name, last_name, date_joined, last_login
    ) = row
    CustomUser.objects.get_or_create(
        id=id,
        defaults={
            "username": username,
            "password": password,
            "is_superuser": is_superuser,
            "is_staff": is_staff,
            "is_active": is_active,
            "email": email,
            "first_name": first_name,
            "last_name": last_name,
            "date_joined": date_joined,
            "last_login": last_login,
        }
    )
for row in rows:
    (
        id, username, password, is_superuser, is_staff, is_active,
        email, first_name, last_name, date_joined, last_login
    ) = row
    CustomUser.objects.get_or_create(
        id=id,
        defaults={
            "username": username,
            "password": password,
            "is_superuser": is_superuser,
            "is_staff": is_staff,
            "is_active": is_active,
            "email": email,
            "first_name": first_name,
            "last_name": last_name,
            "date_joined": date_joined,
            "last_login": last_login,
        }
    )
for row in rows:
    (
        id, username, password, is_superuser, is_staff, is_active,
        email, first_name, last_name, date_joined, last_login
    ) = row
    CustomUser.objects.get_or_create(
        id=id,
        defaults={
            "username": username,
            "password": password,
            "is_superuser": is_superuser,
            "is_staff": is_staff,
            "is_active": is_active,
            "email": email,
            "first_name": first_name,
            "last_name": last_name,
            "date_joined": date_joined,
            "last_login": last_login,
        }
    )
from django.db import connection
from food_order_api.models import CustomUser
with connection.cursor() as cursor:
    cursor.execute("""
        SELECT id, username, password, is_superuser, is_staff, is_active,
               email, first_name, last_name, date_joined, last_login
        FROM auth_user
    """)
    rows = cursor.fetchall()
for row in rows:
    (
        id, username, password, is_superuser, is_staff, is_active,
        email, first_name, last_name, date_joined, last_login
    ) = row
    CustomUser.objects.get_or_create(
        id=id,
        defaults={
            "username": username,
            "password": password,
            "is_superuser": is_superuser,
            "is_staff": is_staff,
            "is_active": is_active,
            "email": email,
            "first_name": first_name,
            "last_name": last_name,
            "date_joined": date_joined,
            "last_login": last_login,
        }
    )
exit()
from food_order_api.models import School
School.objects.all()
python manage.py makemigrations food_order_api
python manage.py migrate
exit()
from django.contrib.auth.models import User
u = User.objects.get(username='exampleuser')
u.has_perm('food_order_api.change_school')
u.has_perm('food_order_api.view_school')
from django.contrib.auth.models import User
u = User.objects.get(username='exampleuser')
u.has_perm('food_order_api.change_school')
u.has_perm('food_order_api.view_school')exit()
exit();
from django.contrib.auth.models import User
u = User.objects.get(username='Staff_User')
u.has_perm('food_order_api.change_school')
exit();
